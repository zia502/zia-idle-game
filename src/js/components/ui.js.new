/**
 * UI模块 - 负责管理游戏界面和用户交互元素
 */
const UI = {
    /**
     * 当前活跃的屏幕
     */
    activeScreen: null,
    
    /**
     * 通知列表
     */
    notifications: [],
    
    /**
     * 初始化UI系统
     */
    init() {
        console.log('UI系统初始化');
        this.setupEventListeners();
        this.createUIElements();
        
        // 默认显示主屏幕
        this.switchScreen('main-screen');
    },
    
    /**
     * 设置UI事件监听
     */
    setupEventListeners() {
        // 监听窗口大小变化
        window.addEventListener('resize', () => {
            this.adjustLayout();
        });
        
        // 添加导航按钮事件监听
        document.querySelectorAll('[data-screen]').forEach(button => {
            button.addEventListener('click', (e) => {
                const targetScreen = e.target.getAttribute('data-screen');
                if (targetScreen) {
                    this.switchScreen(targetScreen);
                    console.log(`切换到屏幕: ${targetScreen}`);
                }
            });
        });
        
        // 添加保存和重置按钮事件
        const saveBtn = document.getElementById('save-btn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                if (typeof Game !== 'undefined' && typeof Game.saveGame === 'function') {
                    Game.saveGame();
                    this.showNotification('游戏已保存', 'success');
                }
            });
        }
        
        const resetBtn = document.getElementById('reset-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                if (confirm('确定要重置游戏吗？所有进度将会丢失。')) {
                    if (typeof Game !== 'undefined' && typeof Game.resetGame === 'function') {
                        Game.resetGame();
                        this.showNotification('游戏已重置', 'info');
                    }
                }
            });
        }
    },
    
    /**
     * 创建UI元素
     */
    createUIElements() {
        // 检查通知容器是否存在，不存在则创建
        if (!document.getElementById('notification-container')) {
            const notificationContainer = document.createElement('div');
            notificationContainer.id = 'notification-container';
            notificationContainer.className = 'notification-container';
            document.body.appendChild(notificationContainer);
        }
        
        // 检查消息框是否存在，不存在则创建
        if (!document.getElementById('message-box')) {
            const messageBox = document.createElement('div');
            messageBox.id = 'message-box';
            messageBox.className = 'message-box hidden';
            document.body.appendChild(messageBox);
        }
        
        // 创建加载指示器
        if (!document.getElementById('loading-indicator')) {
            const loadingIndicator = document.createElement('div');
            loadingIndicator.id = 'loading-indicator';
            loadingIndicator.className = 'loading-indicator hidden';
            loadingIndicator.innerHTML = `
                <div class="spinner"></div>
                <div class="loading-text">加载中...</div>
            `;
            document.body.appendChild(loadingIndicator);
        }
    },
    
    /**
     * 切换显示屏幕
     * @param {string} screenId - 屏幕元素ID
     */
    switchScreen(screenId) {
        // 隐藏所有屏幕
        document.querySelectorAll('.game-screen').forEach(screen => {
            screen.classList.add('hidden');
        });
        
        // 显示目标屏幕
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.remove('hidden');
            this.activeScreen = screenId;
            
            // 触发屏幕切换事件
            if (typeof Events !== 'undefined' && typeof Events.emit === 'function') {
                Events.emit('ui:screenChanged', { screen: screenId });
            }
            
            console.log(`切换到屏幕: ${screenId}`);
        } else {
            console.warn(`屏幕 ${screenId} 不存在`);
        }
    },
    
    /**
     * 显示通知消息
     * @param {string} message - 通知内容
     * @param {string} type - 通知类型 (info, success, warning, error)
     * @param {number} duration - 持续时间(毫秒)
     */
    showNotification(message, type = 'info', duration = 3000) {
        const notificationContainer = document.getElementById('notification-container');
        if (!notificationContainer) return;
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-icon"></div>
            <div class="notification-message">${message}</div>
        `;
        
        notificationContainer.appendChild(notification);
        
        // 添加到通知列表
        this.notifications.push({
            element: notification,
            timestamp: Date.now(),
            duration: duration
        });
        
        // 显示动画
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // 设置自动消失
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
                // 从列表中移除
                const index = this.notifications.findIndex(n => n.element === notification);
                if (index !== -1) {
                    this.notifications.splice(index, 1);
                }
            }, 300);
        }, duration);
    },
    
    /**
     * 显示消息框
     * @param {string} message - 消息内容
     * @param {number} duration - 持续时间(毫秒)
     */
    showMessage(message, duration = 1500) {
        const messageBox = document.getElementById('message-box');
        if (!messageBox) return;
        
        messageBox.textContent = message;
        messageBox.classList.remove('hidden');
        
        // 设置自动消失
        clearTimeout(this.messageTimeout);
        this.messageTimeout = setTimeout(() => {
            messageBox.classList.add('hidden');
        }, duration);
    },
    
    /**
     * 显示加载指示器
     * @param {boolean} show - 是否显示
     * @param {string} text - 加载文本
     */
    showLoading(show = true, text = '加载中...') {
        const loadingIndicator = document.getElementById('loading-indicator');
        if (!loadingIndicator) return;
        
        const loadingText = loadingIndicator.querySelector('.loading-text');
        if (loadingText) {
            loadingText.textContent = text;
        }
        
        if (show) {
            loadingIndicator.classList.remove('hidden');
        } else {
            loadingIndicator.classList.add('hidden');
        }
    },
    
    /**
     * 调整界面布局
     */
    adjustLayout() {
        // 根据窗口大小调整UI布局
        const isMobile = window.innerWidth < 768;
        document.body.classList.toggle('mobile-layout', isMobile);
        
        // 触发布局调整事件
        if (typeof Events !== 'undefined' && typeof Events.emit === 'function') {
            Events.emit('ui:layoutChanged', { isMobile });
        }
    },
    
    /**
     * 更新资源显示
     * @param {object} resources - 资源对象
     */
    updateResourceDisplay(resources) {
        const goldElement = document.getElementById('gold-display');
        if (goldElement && resources.gold !== undefined) {
            goldElement.textContent = resources.gold;
        }
        
        const gemElement = document.getElementById('gem-display');
        if (gemElement && resources.gems !== undefined) {
            gemElement.textContent = resources.gems;
        }
        
        const energyElement = document.getElementById('energy-display');
        if (energyElement && resources.energy !== undefined) {
            energyElement.textContent = `${resources.energy}/${resources.maxEnergy}`;
        }
    }
};
