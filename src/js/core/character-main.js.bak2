/**
 * 创建主角方法 - 添加到Character对象
 */
Character.createMainCharacter = function(data) {
    // 检查是否已有主角
    const existingMainCharacter = this.getMainCharacter();
    if (existingMainCharacter) {
        console.warn('主角已存在，无法创建新主角');
        return existingMainCharacter.id;
    }
    
    // 设置主角数据
    const characterData = {
        ...data,
        isMainCharacter: true,
        level: 1,
        exp: 0,
        // 默认主角特性
        traits: data.traits || ['quickLearner'],
        // 默认主角职业
        job: {
            current: 'novice',
            level: 1,
            history: ['novice'],
            jobTraits: {}
        },
        // 默认属性
        baseStats: {
            hp: 100,
            attack: 10,
            defense: 5,
            speed: 5
        },
        currentStats: {
            hp: 100
        }
    };
    
    // 添加主角
    const characterId = this.addCharacter(characterData);
    
    if (characterId) {
        console.log(`创建主角成功: ${data.name}`);
        
        // 设置游戏主角等级
        if (typeof Game !== 'undefined') {
            Game.state.playerLevel = 1;
        }
    }
    
    return characterId;
};

/**
 * 获取主角方法 - 添加到Character对象
 * @returns {object|null} 主角对象或null
 */
Character.getMainCharacter = function() {
    // 检查是否有角色数据
    if (!this.characters || Object.keys(this.characters).length === 0) {
        console.log('没有角色数据');
        return null;
    }
    
    // 遍历所有角色，查找主角
    for (const id in this.characters) {
        const character = this.characters[id];
        if (character && character.isMainCharacter) {
            console.log('找到主角:', character.name);
            return character;
        }
    }
    
    console.log('未找到主角');
    return null;
};

/**
 * 获取升级所需经验值 - 添加到Character对象
 * @param {number} level - 当前等级
 * @returns {number} 升级所需经验值
 */
Character.getExpToNextLevel = function(level) {
    // 简单的经验值计算公式
    return Math.floor(100 * Math.pow(1.5, level - 1));
};
